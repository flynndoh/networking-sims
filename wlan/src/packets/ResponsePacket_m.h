//
// Generated file, do not edit! Created by opp_msgtool 6.0 from packets/ResponsePacket.msg.
//

#ifndef __RESPONSEPACKET_M_H
#define __RESPONSEPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

class ResponsePacket;
/**
 * Class generated from <tt>packets/ResponsePacket.msg:1</tt> by opp_msgtool.
 * <pre>
 * packet ResponsePacket
 * {
 *     // The sequence number set by the transmitter.	
 *     int sequenceNumber;
 * 
 *     // The number of overhead bits in a packet (header, trailer).
 *     int overheadBits;
 * 
 *     // The number of user data bits in a packet.
 *     int userBits;
 * 
 *     // Error flag that determines if the packet is erroneous.
 *     bool errorFlag;
 * 
 *     // The number of erroneous bits inside the packet.
 *     int bitErrorCount;
 * }
 * </pre>
 */
class ResponsePacket : public ::omnetpp::cPacket
{
  protected:
    int sequenceNumber = 0;
    int overheadBits = 0;
    int userBits = 0;
    bool errorFlag = false;
    int bitErrorCount = 0;

  private:
    void copy(const ResponsePacket& other);

  protected:
    bool operator==(const ResponsePacket&) = delete;

  public:
    ResponsePacket(const char *name=nullptr, short kind=0);
    ResponsePacket(const ResponsePacket& other);
    virtual ~ResponsePacket();
    ResponsePacket& operator=(const ResponsePacket& other);
    virtual ResponsePacket *dup() const override {return new ResponsePacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);

    virtual int getOverheadBits() const;
    virtual void setOverheadBits(int overheadBits);

    virtual int getUserBits() const;
    virtual void setUserBits(int userBits);

    virtual bool getErrorFlag() const;
    virtual void setErrorFlag(bool errorFlag);

    virtual int getBitErrorCount() const;
    virtual void setBitErrorCount(int bitErrorCount);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ResponsePacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ResponsePacket& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline ResponsePacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<ResponsePacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __RESPONSEPACKET_M_H

